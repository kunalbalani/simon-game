package edu.nyu.pqs.simon;

import java.awt.Color;
import java.util.*;

import javax.swing.JOptionPane;

/**
 *This is an Class contains the Model of Simon Game.
 *It Encapsulates all the data structure and Methods used to Store and Modify
 *the state of the Game.
 *<br>
 *This class implements Subject Interface So that The Observers can get 
 *Notified of the current State of the game.
 *
 *@author Kunal Balani 
 */
public class SimonGame implements Subject
{
	//Stores the current length of the Color Sequence
	private int sequenceLength = 1;
	//Stores the List of Colors to be flashed
	private Vector<FlashColors> sequenceColors; 
	//List Requires to store all the Observers
	private List<SimonObserver> observers;
	//score to indicate the number of sequences which user got right
	int score;
	//boolean which indicates whether game is over or not
	boolean isGameOver = false;
	
	
	/**
	 * Constructs the Object for the SimonGame
	 */
	public SimonGame()
	{
		observers = new ArrayList<SimonObserver>();
		sequenceColors = new Vector<FlashColors>();
	}
	
	/**
	 * Game Begins when this method is invoked.
	 * This method adds a new random Color to the List of color Sequence.
	 * It further notifies about this List to all it observers to 
	 * display the new sequence of colors. 
	 */
	public void play()
	{
		
		for(int i = 0 ; i < sequenceLength ; i++)
		{
			//generate Random Number between 0 to 4
			int randomNumber = new Random().nextInt()%4;
			if(randomNumber < 0)
				randomNumber = randomNumber *-1;
			/*get the specified Color to the corresponding integer 
			  and adds it to the List of Colors to be displayed */
			mapColor(randomNumber);
		}
		notifyObservers();
	}
	
	/**
	 * Adds a Color to the List of the sequences to be displayed.
	 * Color added depends on the random number generated
	 * @param randomColor maps this integer to a color
	 */
	private void mapColor(int randomColor)
	{
		if(randomColor ==  0)
			sequenceColors.add(FlashColors.Red);
		else if(randomColor ==  1)
			sequenceColors.add(FlashColors.Blue);
		else if(randomColor ==  2 )
			sequenceColors.add(FlashColors.Green);
		else if(randomColor ==  3 )
			sequenceColors.add(FlashColors.Yellow);
		
	}

	/**
	 * This method check whether the Input provided by the user is 
	 * correct or wrong.
	 * <br>
	 * If the Input is correct then a game continues with one extra color 
	 * added to the sequence.
	 * else the game is over
	 * @param userInput sequence of the user Input
	 */
	public void checkUserInput(Vector<FlashColors> userInput)
	{
		if(compareUserInput(userInput))
		{
			score = score + 1;
			//advance game 
			play();
		}
		else
			gameOver();
	}
	
	/**
	 * Compares the User Input color Sequence with the Color sequence 
	 * generated by the game.
	 *  @param userInput List of the color Sequenc entered by the user
	 * @return If both the sequence matches then it returns true else it 
	 * returns false.
	 */
	private boolean compareUserInput(Vector<FlashColors> userInput)
	{
		boolean result = true;
		for(int i = 0; i < userInput.size() ; i++)
		{
			if(userInput.get(i) != sequenceColors.get(i))
			{
				result = false;
			}
		}
		return result;
	}
	
	/**
	 * Notifies Observers that the game is over
	 */
	private void gameOver() 
	{
		score = 0;
		isGameOver = true;
		notifyObservers();
	}

	/**
	 * Restarts the Game
	 */
	public void restart()
	{
		sequenceLength = 1;
		sequenceColors.clear();
		score = 0;
		isGameOver = false;
		play();
	}
	
	/**
	 * Each Observer is notified about the current state of the SimonGame
	 */
	@Override
	public void notifyObservers()
	{
		for(int i =0; i<observers.size(); i++)
		{
			SimonObserver observer = observers.get(i);
			observer.nextColorSequence(sequenceColors);
			observer.turnOver();
			observer.gameOver(isGameOver);
			observer.updateScore(score);
		}
	}
	
	/**
	 * Adds an Observer to the set of Observers for the SimonGame Class.
	 * @throws NullPointerException If the Observer is Null
	 * @throws IllegalArgumentException If the Observer is already present 
	 * @param Observer
	 */
	@Override
	public void registerObserver(SimonObserver o) 
	{
		if(!observers.contains(0))
			observers.add(o);
		else
			throw new IllegalArgumentException("Observer Already Present");
	}
	
	/**
	 * Removes an Observer from the set of Observers for the SimonGame Class.
	 * @throws NullPointerException If the Observer is Null
	 * @throws IllegalArgumentException If the Observer is not present 
	 * in the set 
	 * @param Observer
	 */
	@Override
	public void removeObserver(SimonObserver o) 
	{
		int i = observers.indexOf(o);
		if(i >= 0 )
			observers.remove(i);
		else
			throw new IllegalArgumentException("Observer not Found");		
	}
}
