package edu.nyu.pqs.simon;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.TimerTask;
import java.util.Vector;
import javax.swing.*;
import javax.swing.border.LineBorder;

/**
 * This class Provides a User Interface for the Simon Game.
 * <br>
 * It has four colored button (Red,Blue,Green and Yellow) and two control 
 * buttons for Restart and Quit.
 * <br>
 * It also acts as an Observer to SimonGame.
 * It displays the current state of the Simon Game
 * @author Kunal Balani
 *
 */
public class SimonGameUi extends JFrame implements SimonObserver,ActionListener
{
	/*Stores a refrence of the game object in order to 
	  inform the class about the user events */ 
	SimonGame simon;
	JPanel colorButtonsPanel,controlButtonsPanel,scoreBoard;
	JButton quitButton,restartButton;
	JButton redButton,blueButton,greenButton,yellowButton;
	Vector<JButton> colorButtons;
	JLabel labelScore,score;
	//Vector used to store the seuence of the buttons entered by the user
	Vector<FlashColors> buttonsPressed;
	//Counts the number of buttons pressed by the user
	int countUserInput;
	//Stores the length of the sequence generated by the game.
	int seuqneceLength;
	/*This is enabled when the Simon game is displaying the color sequence 
	to the user. SimonGameUi should not accept any input 
	from the user when this flag is enabled*/
	boolean flashButtonInProcess = false;
	
	/**
	 * Designs the user interface using swing objects for Simon Game.<br>
	 * It takes the object of the game as an input and stores a reference of 
	 * this object in order to pass the user events to the game.
	 */
	public SimonGameUi(SimonGame simongame)
	{
		//store the model reference
		simon = simongame;
		
		//Divide The Frame into two halves
		getContentPane().setLayout(new GridLayout(0,1));
		
		//Ui consist of two panels placed One below the Other
		colorButtonsPanel = new JPanel();
		controlButtonsPanel = new JPanel();
		scoreBoard = new JPanel();
		getContentPane().add(colorButtonsPanel);
		getContentPane().add(controlButtonsPanel);
		getContentPane().add(scoreBoard);

		//Add The Color Buttons to the Color Buttons Panel
		colorButtons = new Vector<JButton>();
		buttonsPressed = new Vector<FlashColors>();
		
		redButton = new JButton();
		putBottonOnPanel(redButton,Color.red);
		
		blueButton = new JButton();
		putBottonOnPanel(blueButton,Color.blue);
		
		greenButton = new JButton();
		putBottonOnPanel(greenButton,Color.green);
		
		yellowButton = new JButton();
		putBottonOnPanel(yellowButton,Color.yellow);
		
		for(int i = 0; i < colorButtons.size() ; i++)
			colorButtonsPanel.add(colorButtons.get(i));
		
		//Adding Quit and Reset Button to Control Button panel
		quitButton = new JButton("Quit");
		quitButton.addActionListener(new ActionListener()
		{
            public void actionPerformed(ActionEvent e)
            {
                dispose();
            }
        });
		restartButton = new JButton("Restart");
		restartButton.addActionListener(new ActionListener()
		{
            public void actionPerformed(ActionEvent e)
            {
                restart();
            }			
        });
		controlButtonsPanel.add(quitButton);
		controlButtonsPanel.add(restartButton);
		
		//add score Board
		labelScore = new JLabel("Score:");
		score = new JLabel("0");
		scoreBoard.add(labelScore);
		scoreBoard.add(score);
		
		//Set The parameters of the Container
		setSize(200,200);
		setTitle("Simon");
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
	}
	
	/**
	 * Designs Button for Flashing and put it on the Panel
	 * @param button
	 * @param color
	 */
	private void putBottonOnPanel(JButton button,Color color) 
	{
		button.setPreferredSize(new Dimension(40, 40));
		button.setBorder(new LineBorder(color,2));
		button.addActionListener(this);
		colorButtons.add(button);
	}
	
	/**
	 * Gets Invoked when the Game Model notifies the obserer.
	 * It informs about the color sequence to be displayed to the user.
	 * @param sequenceColor A Vector of FlashColors 
	 */
	@Override
	public void nextColorSequence(final Vector<FlashColors> sequenceColors) 
	{
		 /*Spawn a new thread so that the Observer 
		  does not block the Subject(Simon game)
		  from notifying the other observers */
		 Thread thread = new Thread("New Thread") 
		 {
		      public void run()
		      { 
		    	  flashButtonInProcess = true;
		    	  displayColorSequence(sequenceColors);
		    	  flashButtonInProcess = false;
		      }
		 };  
		 thread.start();
	}
	
	/**
	 * Flashes the buttons in the order provided by the sequence.
	 * @param sequenceColors Vector which specifies the sequence in which the
	 * color buttons should be flashed
	 */
	private void displayColorSequence(Vector<FlashColors> sequenceColors) 
	{
		seuqneceLength = sequenceColors.size();
		for(int i = 0 ; i < seuqneceLength ; i++)
		{
			FlashColors flashcolor = sequenceColors.get(i);
			if(flashcolor == FlashColors.Red)
				flashButton(redButton,Color.red);
			else if(flashcolor == FlashColors.Blue)
				flashButton(blueButton,Color.blue);
			else if(flashcolor == FlashColors.Green)
				flashButton(greenButton,Color.green);
			else if(flashcolor == FlashColors.Yellow)
				flashButton(yellowButton,Color.yellow);
			
		}
	}

	/**
	 * Flashes the given button by changing its background color 
	 * with the specified color
	 * @param button 
	 * @param color 
	 */
	private void flashButton(JButton button,Color color) 
	{
		button.setBackground(color);
		try 
		{
			Thread.sleep(1000);
		}
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		button.setBackground(null);
		try 
		{
			// Need to distinguish when consecutive colors are flashed twice
			Thread.sleep(500);
		}
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
	}

	/**
	 * Restarts the game
	 */
	private void restart()
	{
		buttonsPressed.clear();
		countUserInput = 0;
		simon.restart();
	}
	/**
	 * Puts the Color of the selected button into the list of the user 
	 * Input sequences 
	 */
	@Override
	public void actionPerformed(ActionEvent e) 
	{
		/* Process the event only after the Simon game display all its color
		sequence */
		if(!flashButtonInProcess)
		{
			JButton button = (JButton) e.getSource();
			
			if(button == redButton)
				buttonsPressed.add(FlashColors.Red);
			else if(button == blueButton)
				buttonsPressed.add(FlashColors.Blue);
			else if(button == greenButton)
				buttonsPressed.add(FlashColors.Green);
			else if(button == yellowButton)
				buttonsPressed.add(FlashColors.Yellow);
			
			countUserInput = countUserInput + 1;
			//Check whether the user has given all the input colors
			if(countUserInput == seuqneceLength)
				simon.checkUserInput(buttonsPressed);
		}
	}

	/**
	 * Resets the user Input List.
	 */
	@Override
	public void turnOver()
	{
		buttonsPressed.clear();
		countUserInput = 0;
	}

	/**
	 * Indicates whether Game is over or not. Game is over when the user enters 
	 * an incorrect sequence
	 * @param isGameOver returns true if the game is over or else returns false
	 */
	@Override
	public void gameOver(boolean isGameOver)
	{
		if(isGameOver)
		{
			JOptionPane.showMessageDialog(this,"You Lose");
			restart();
		}
	}

	/**
	 * Updates The score
	 */
	@Override
	public void updateScore(int score)
	{
		this.score.setText(Integer.valueOf(score).toString());
	}
}
